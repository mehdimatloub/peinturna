const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const db = require('../config/db'); // Connexion √† la base de donn√©es
const router = express.Router();

// Cl√© secr√®te pour signer les tokens (√† d√©placer dans votre fichier .env pour la s√©curit√©)
const JWT_SECRET = process.env.JWT_SECRET || 'votre_cl√©_secr√®te';

// Endpoint d'inscription
router.post('/register', async (req, res) => {
    try {
        const { name, email, password } = req.body;

        // Validation des champs
        if (!name || !email || !password) {
            return res.status(400).json({ message: 'Tous les champs sont requis' });
        }

        // V√©rifier si l'utilisateur existe d√©j√†
        const checkUserQuery = 'SELECT * FROM users WHERE email = ?';
        const [existingUser] = await db.query(checkUserQuery, [email]);

        if (existingUser.length > 0) {
            return res.status(400).json({ message: 'Email d√©j√† utilis√©' });
        }

        // Hashage du mot de passe
        const hashedPassword = await bcrypt.hash(password, 10);

        // Ins√©rer l'utilisateur
        const insertUserQuery = 'INSERT INTO users (name, email, password) VALUES (?, ?, ?)';
        const [result] = await db.query(insertUserQuery, [name, email, hashedPassword]);
        const userId = result.insertId;
        res.status(201).json({
            message: 'Utilisateur cr√©√© avec succ√®s',
            user: {
                id: userId,
                name,
                email,
                
            },
            
        }
    );
    console.log("Utilisateur cr√©√© :", { id: userId, name, email });

    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'Erreur serveur inattendue' });
    }
});

// Endpoint de connexion
router.post('/login', async (req, res) => {
    try {
        const { email, password } = req.body;

        // Validation des champs
        if (!email || !password) {
            return res.status(400).json({ message: 'Email et mot de passe sont requis' });
        }
        console.log('D√©but de la requ√™te de connexion');
        const getUserQuery = 'SELECT * FROM users WHERE email = ?';
        const [results] = await db.execute(getUserQuery, [email]);
        console.log('R√©sultats de la requ√™te:', results);

        if (results.length === 0) {
            return res.status(401).json({ message: "Utilisateur introuvable" });
        }

        const user = results[0];

        // V√©rification du mot de passe
        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(401).json({ message: 'Mot de passe incorrect' });
        }

        // G√©n√©ration du token JWT
        const token = jwt.sign(
            { id: user.id, name: user.name, email: user.email },
            JWT_SECRET,
            { expiresIn: '1h' } // Expiration du token (1 heure dans cet exemple)
        );

        // Envoi de la r√©ponse avec le token
        res.status(200).json({
            message: 'Connexion r√©ussie',
            token,
            user: { id: user.id, name: user.name, email: user.email },
        });
        console.log("R√©ponse envoy√©e par le backend :", {
            id: user.id,
            name: user.name,
            email: user.email,
        })
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'Erreur serveur inattendue' });
    }
});

// Endpoint pour v√©rifier le token (optionnel)
router.get('/profile', async (req, res) => {
    const token = req.headers['authorization']?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'Token manquant' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        res.status(200).json({ message: 'Token valide', user: decoded });
    } catch (error) {
        console.error('Erreur JWT:', error.message);
        res.status(401).json({ message: 'Token invalide ou expir√©' });
    }
});
const nodemailer = require('nodemailer');

// üìß Configuration de Nodemailer
const transporter = nodemailer.createTransport({
    service: 'Gmail', // Ou autre service comme SendGrid ou Mailgun
    auth: {
        user: process.env.EMAIL_USER, // Email de l'exp√©diteur
        pass: process.env.EMAIL_PASS, // Mot de passe ou App Password
    },
});

// Endpoint : Demander la r√©initialisation du mot de passe
router.post('/forgot-password', async (req, res) => {
    const { email } = req.body;

    if (!email) {
        return res.status(400).json({ message: 'Veuillez entrer un e-mail' });
    }

    try {
        // V√©rifier si l'utilisateur existe
        const getUserQuery = 'SELECT * FROM users WHERE email = ?';
        const [users] = await db.execute(getUserQuery, [email]);

        if (users.length === 0) {
            return res.status(404).json({ message: "Aucun compte trouv√© avec cet e-mail" });
        }

        const user = users[0];

        // G√©n√©rer un token JWT valide 1 heure
        const resetToken = jwt.sign({ id: user.id, email: user.email }, JWT_SECRET, { expiresIn: '1h' });

        // Lien de r√©initialisation
        const resetLink = `${process.env.FRONTEND_URL}/reset-password?token=${resetToken}`;

        // Envoyer un e-mail avec le lien de r√©initialisation
        await transporter.sendMail({
            from: process.env.EMAIL_USER,
            to: email,
            subject: "R√©initialisation de votre mot de passe",
            html: `
                <h2>Demande de r√©initialisation de mot de passe</h2>
                <p>Cliquez sur le lien ci-dessous pour r√©initialiser votre mot de passe :</p>
                <a href="${resetLink}" target="_blank">${resetLink}</a>
                <p>Ce lien expirera dans 1 heure.</p>
            `,
        });

        res.json({ message: 'E-mail de r√©initialisation envoy√© avec succ√®s' });

    } catch (error) {
        console.error('Erreur lors de la demande de r√©initialisation:', error);
        res.status(500).json({ message: 'Erreur serveur' });
    }
});
// Endpoint : R√©initialiser le mot de passe
router.post('/reset-password', async (req, res) => {
    const { token, newPassword } = req.body;

    if (!token || !newPassword) {
        return res.status(400).json({ message: 'Token et nouveau mot de passe sont requis' });
    }

    try {
        // V√©rifier et d√©coder le token
        const decoded = jwt.verify(token, JWT_SECRET);

        // Hasher le nouveau mot de passe
        const hashedPassword = await bcrypt.hash(newPassword, 10);

        // Mettre √† jour le mot de passe dans la base de donn√©es
        const updatePasswordQuery = 'UPDATE users SET password = ? WHERE id = ?';
        await db.execute(updatePasswordQuery, [hashedPassword, decoded.id]);

        res.json({ message: 'Mot de passe mis √† jour avec succ√®s' });

    } catch (error) {
        console.error('Erreur lors de la r√©initialisation du mot de passe:', error.message);
        res.status(400).json({ message: 'Token invalide ou expir√©' });
    }
});


module.exports = router;
